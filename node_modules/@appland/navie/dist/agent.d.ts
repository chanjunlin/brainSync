import { ContextV2 } from './context';
import { UserOptions } from './lib/parse-options';
import { ProjectInfo } from './project-info';
export declare enum AgentMode {
    Explain = "explain",
    Generate = "generate",
    Help = "help",
    Test = "test",
    Plan = "plan"
}
export declare class AgentOptions {
    question: string;
    aggregateQuestion: string;
    userOptions: UserOptions;
    chatHistory: string[];
    projectInfo: ProjectInfo[];
    codeSelection?: string | undefined;
    contextLabels?: ContextV2.ContextLabel[] | undefined;
    constructor(question: string, aggregateQuestion: string, userOptions: UserOptions, chatHistory: string[], projectInfo: ProjectInfo[], codeSelection?: string | undefined, contextLabels?: ContextV2.ContextLabel[] | undefined);
    get hasAppMaps(): boolean;
    buildContextFilters(): ContextV2.ContextFilters;
}
export type AgentResponse = {
    response: string;
    abort: boolean;
};
export interface Agent {
    perform(options: AgentOptions, tokensAvailable: () => number): Promise<AgentResponse | void>;
    temperature: number | undefined;
    applyQuestionPrompt(question: string): void;
}
