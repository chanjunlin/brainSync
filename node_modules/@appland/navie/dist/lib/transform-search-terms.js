"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const console_1 = require("console");
function transformSearchTerms(transformTerms, aggregateQuestion, vectorTermsService) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        let result;
        if (transformTerms) {
            result = yield vectorTermsService.suggestTerms(aggregateQuestion);
        }
        else {
            const terms = new Array();
            for (const term of aggregateQuestion.split(/[._-\s]/))
                terms.push(((_a = term.match(/\+?[\p{Alphabetic}|\p{Number}]+/u)) === null || _a === void 0 ? void 0 : _a[0]) || '');
            result = terms
                .map((word) => word.trim())
                .filter((word) => word.length > 2)
                .map((word) => word.toLowerCase());
        }
        if (result.length === 0) {
            (0, console_1.warn)('No search terms were generated.');
        }
        else {
            (0, console_1.warn)(`Transformed search terms: ${result.join(' ')}`);
        }
        return result;
    });
}
exports.default = transformSearchTerms;
