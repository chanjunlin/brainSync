"use strict";
var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const js_yaml_1 = require("js-yaml");
class ListFilesCommand {
    constructor(fileChangeExtractorService) {
        this.fileChangeExtractorService = fileChangeExtractorService;
    }
    execute(request, chatHistory) {
        return __asyncGenerator(this, arguments, function* execute_1() {
            const files = (yield __await(this.fileChangeExtractorService.listFiles(request, chatHistory))) || [];
            const fence = request.userOptions.isEnabled('fence', true);
            const format = request.userOptions.stringValue('format') || 'yaml';
            let contextStr;
            if (format === 'yaml') {
                contextStr = (0, js_yaml_1.dump)(files);
            }
            else {
                contextStr = JSON.stringify(files, null, 2);
            }
            if (fence)
                yield yield __await(`\`\`\`${format}\n`);
            yield yield __await(contextStr);
            if (fence)
                yield yield __await('```\n');
        });
    }
}
exports.default = ListFilesCommand;
