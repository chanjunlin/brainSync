"use strict";
/* eslint-disable no-await-in-loop */
var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};
Object.defineProperty(exports, "__esModule", { value: true });
class ApplyCommand {
    constructor(fileChangeExtractor, fileUpdateService) {
        this.fileChangeExtractor = fileChangeExtractor;
        this.fileUpdateService = fileUpdateService;
    }
    execute(request, chatHistory) {
        return __asyncGenerator(this, arguments, function* execute_1() {
            var _a, e_1, _b, _c;
            let fileNames;
            if (request.userOptions.booleanValue('all', false) || request.question.trim() === 'all') {
                fileNames = yield __await(this.fileChangeExtractor.listFiles(request, chatHistory));
            }
            else if (request.question.trim()) {
                fileNames = [request.question.trim()];
            }
            if (!fileNames || fileNames.length === 0) {
                yield yield __await('No file changes found in the conversation.\n');
                return yield __await(void 0);
            }
            for (const fileName of fileNames) {
                const fileUpdates = this.fileChangeExtractor.extractFile(request, chatHistory, fileName);
                if (!fileUpdates) {
                    yield yield __await(`No file updates found for ${fileName}.\n`);
                    // eslint-disable-next-line no-continue
                    continue;
                }
                yield yield __await(`File change parsed successfully for ${fileName}\n`);
                for (const fileUpdate of fileUpdates) {
                    yield yield __await(`Applying file update for ${fileUpdate.file}\n`);
                    const messages = yield __await(this.fileUpdateService.apply(fileUpdate));
                    if (messages) {
                        try {
                            for (var _d = true, messages_1 = (e_1 = void 0, __asyncValues(messages)), messages_1_1; messages_1_1 = yield __await(messages_1.next()), _a = messages_1_1.done, !_a;) {
                                _c = messages_1_1.value;
                                _d = false;
                                try {
                                    const message = _c;
                                    yield yield __await(message);
                                }
                                finally {
                                    _d = true;
                                }
                            }
                        }
                        catch (e_1_1) { e_1 = { error: e_1_1 }; }
                        finally {
                            try {
                                if (!_d && !_a && (_b = messages_1.return)) yield __await(_b.call(messages_1));
                            }
                            finally { if (e_1) throw e_1.error; }
                        }
                    }
                }
            }
        });
    }
}
exports.default = ApplyCommand;
