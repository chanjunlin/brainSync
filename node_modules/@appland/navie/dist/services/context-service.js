"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const transform_search_terms_1 = __importDefault(require("../lib/transform-search-terms"));
const lookup_context_service_1 = __importDefault(require("./lookup-context-service"));
class ContextService {
    constructor(vectorTermsService, lookupContextService, applyContextService) {
        this.vectorTermsService = vectorTermsService;
        this.lookupContextService = lookupContextService;
        this.applyContextService = applyContextService;
    }
    perform(options, tokensAvailable, additionalTerms = []) {
        return __awaiter(this, void 0, void 0, function* () {
            const lookupContext = options.userOptions.isEnabled('context', true);
            const transformTerms = options.userOptions.isEnabled('terms', true);
            if (lookupContext) {
                const searchTerms = yield (0, transform_search_terms_1.default)(transformTerms, options.aggregateQuestion, this.vectorTermsService);
                if (additionalTerms.length) {
                    searchTerms.push(...additionalTerms);
                }
                const tokenCount = tokensAvailable();
                const context = yield this.lookupContextService.lookupContext(searchTerms, tokenCount, options.buildContextFilters());
                lookup_context_service_1.default.applyContext(context, [], this.applyContextService, tokenCount);
            }
        });
    }
}
exports.default = ContextService;
