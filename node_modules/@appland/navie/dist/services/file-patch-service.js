"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const openai_1 = require("@langchain/openai");
const console_1 = require("console");
const promises_1 = require("fs/promises");
const completion_1 = __importDefault(require("../lib/completion"));
const SYSTEM_PROMPT = `**File Patch Generator**

Your job is to generate a patch to an existing file.

**Inputs**

- **suggested-change**: The code change to apply.
- **existing-code**: The existing code in the file.

**Output**

Respond with a patch in unified diff format that can be applied to the existing code to apply the suggested change.

Emit:

* **Start line:** The line number where the change should be made.
* **Existing line count:** The number of lines in the existing code (without removed lines).
* **Suggested line count:** The number of lines in the suggested change (with added lines).
* **Diff:** The diff of the existing code and the suggested change.

Include 5 lines of context before and after the change.

**Example**

Input:
<existing-code>
1class MicropostsController < ApplicationController
2  before_action :logged_in_user, only: [:create, :destroy]
3  before_action :correct_user, only: :destroy
4
5  def create
6    @micropost = current_user.microposts.build(micropost_params)
7    @micropost.image.attach(params[:micropost][:image])
8    if @micropost.save
9      flash[:success] = "Micropost created!"
10      redirect_to root_url
11    else
12      @feed_items = current_user.feed.paginate(page: params[:page])
13      render "static_pages/home", status: :unprocessable_entity
14    end
15  end
16
17  def destroy
18    @micropost.destroy
19    flash[:success] = "Micropost deleted"
25  end
26
27  private
28
29  def micropost_params
30    params.require(:micropost).permit(:content, :image)
31  end
</existing-code>

<suggested-change>
  def destroy
    @micropost.destroy
    flash[:success] = "Micropost deleted"
    if request.referrer.nil?
      redirect_to root_url, status: :see_other
    else
      redirect_to request.referrer, status: :see_other
    end
  end

  private
</suggested-change>

Output:
\`\`\`diff
--- a/app/controllers/microposts_controller.rb
+++ b/app/controllers/microposts_controller.rb
@@ -17,6 +17,11 @@ class MicropostsController < ApplicationController
   def destroy
     @micropost.destroy
     flash[:success] = "Micropost deleted"
+    if request.referrer.nil?
+      redirect_to root_url, status: :see_other
+    else
+      redirect_to request.referrer, status: :see_other
+    end
   end
 
   private
\`\`\`
`;
class FilePatchService {
    constructor(history, modelName, temperature) {
        this.history = history;
        this.modelName = modelName;
        this.temperature = temperature;
    }
    generatePatch(fileUpdate) {
        var _a, e_1, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            const fileContents = yield (0, promises_1.readFile)(fileUpdate.file, 'utf8');
            const openAI = new openai_1.ChatOpenAI({
                modelName: this.modelName,
                temperature: this.temperature,
            });
            const fileWithNumberedLines = fileContents
                .split('\n')
                .map((line, index) => `${index + 1}${line}`)
                .join('\n');
            const messages = [
                {
                    content: SYSTEM_PROMPT,
                    role: 'system',
                },
                {
                    content: `<existing-code>${fileWithNumberedLines}</existing-code>`,
                    role: 'user',
                },
                {
                    content: `<suggested-change>${fileUpdate.content}</suggested-change>`,
                    role: 'user',
                },
            ];
            const response = (0, completion_1.default)(openAI, messages);
            const tokens = Array();
            try {
                for (var _d = true, response_1 = __asyncValues(response), response_1_1; response_1_1 = yield response_1.next(), _a = response_1_1.done, !_a;) {
                    _c = response_1_1.value;
                    _d = false;
                    try {
                        const token = _c;
                        tokens.push(token);
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = response_1.return)) yield _b.call(response_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            const rawResponse = tokens.join('');
            (0, console_1.warn)(`Code change response:\n${rawResponse}`);
            return rawResponse;
        });
    }
}
exports.default = FilePatchService;
